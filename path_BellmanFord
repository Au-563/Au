#include<iostream>
#include<stack>
using namespace std;

template<class T>
class Graph{    //有向图     
public:
    int v;      //顶点数
    int e;      //边数
    T* pair;    //键对
    int** graph;  //邻接矩阵
public:
    Graph():v(0),e(0){
        this->graph=new int*[1];
        this->pair=new T[1];
    }
    Graph(int v):v(v),e(0){
        this->graph=new int*[v];
        for(int i=0;i<v;i++){
            graph[i]=new int[v]{};
        }
        this->pair=new T[v];
    }
    int GetIdx(T t){
        for(int i=0;i<this->v;i++){
            if(pair[i]==t)
                return i;
        }
        return -1;
    }
    void Print(int** graph,int v){
        cout<<"pair"<<endl;
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
        }
        cout<<"\n\ngraph"<<endl;
        cout<<"\t";
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
        }
        cout<<"\n\n";
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
            for(int j=0;j<this->v;j++){
                cout<<graph[i][j]<<"\t";
            }
            cout<<"\n"<<endl;
        }
        cout<<endl;
    }
    void InsertVertex(T v){
        T* tempPair=new T[++this->v];
        int** tempGraph=new int*[this->v];
        for(int i=0;i<this->v;i++){
            tempGraph[i]=new int[this->v]{};
        }
        int idx=0;
        for(;pair[idx]<v&&idx<this->v-1;idx++){
            tempPair[idx]=this->pair[idx];
        }
        tempPair[idx]=v;
        for(int i=idx+1;i<this->v;i++){
            tempPair[i]=this->pair[i];
        }
        for(int i=0;i<this->v;i++){
            for(int j=0;j<this->v;j++){
                if(i<idx&&j<idx)
                    tempGraph[i][j]=graph[i][j];
                if(i<idx&&j>idx)
                    tempGraph[i][j]=graph[i][j-1];
                if(i>idx&&j<idx)
                    tempGraph[i][j]=graph[i-1][j];
                if(i>idx&&j>idx)
                    tempGraph[i][j]=graph[i-1][j-1];
            }
        }
        if(this->pair)
            delete[]this->pair;
        this->pair=tempPair;
        if(this->graph)
            delete[]this->graph;
        this->graph=tempGraph;
    }
    void InsertEdge(T v,T u,int l){
        graph[GetIdx(v)][GetIdx(u)]=l;
        this->e++;
    }
    void DeleteVertes(T v){
        for(int i=GetIdx(v);i<this->v-1;i++){
            pair[i]=pair[i+1];
            for(int j=GetIdx(v);j<this->v-1;j++){
                graph[i][j]=graph[i+1][j+1];
            }
        }
        this->v--;
    }
    void DeleteEdge(T v,T u){
        graph[GetIdx(v)][GetIdx(u)]=0;
        this->e--;
    }
    //最短路径，任意权值 (v->u)
    int BellmanFord(T v,T u){
        int* dist=new int[this->v]{};
        bool* tag=new bool[this->v]{};
        for(int i=0;i<this->v;i++){
            dist[i]=graph[this->GetIdx(v)][i];
            if(dist[i])
                tag[i]=1;
        }
        for(int k=2;k<this->v;k++){
            stack<int> storTag;
            stack<int> storDist;
            for(int i=0;i<this->v;i++){
                if(i==this->GetIdx(v))
                    continue;
                if(tag[i]){
                    for(int j=0;j<this->v;j++){
                        if(!tag[j]&&graph[i][j]){
                            if(!dist[j]||(dist[j]&&dist[i]+graph[i][j]<dist[j]))
                                dist[j]=dist[i]+graph[i][j];
                            storTag.push(j);
                        }
                    }
                }
            }
            for(int i=0;i<this->v;i++){
                if(i==this->GetIdx(v))
                    continue;
                if(tag[i]){
                    for(int j=0;j<this->v;j++){
                        if(graph[j][i]&&dist[j]+graph[j][i]<dist[i]){
                            storDist.push(dist[j]+graph[j][i]);
                            storDist.push(i);
                        }
                    }
                }
            }
            while(!storTag.empty()){
                tag[storTag.top()]=1;
                storTag.pop();
            }
            while(!storDist.empty()){
                int idx=storDist.top();
                storDist.pop();
                dist[idx]=storDist.top();
                storDist.pop();
            }
        }
        return dist[this->GetIdx(u)];
    }
};

int main(){
    Graph<char> g;
    for(int i=0;i<=6;i++){
        g.InsertVertex('a'+i);
    }
    g.InsertEdge('a','b',6);
    g.InsertEdge('a','c',5);
    g.InsertEdge('a','d',5);
    g.InsertEdge('b','e',-1);
    g.InsertEdge('c','b',-2);
    g.InsertEdge('c','e',1);
    g.InsertEdge('e','g',3);
    g.InsertEdge('d','c',-2);
    g.InsertEdge('d','f',-1);
    g.InsertEdge('f','g',3);
    cout<<"最短路径："<<g.BellmanFord('a','g');
    return 0;
}
