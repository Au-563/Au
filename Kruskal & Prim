#include<iostream>
using namespace std;

template<class T>
class Graph{    //无向图     
public:
    int v;      //顶点数
    int e;      //边数
    T* pair;    //键对
    T** graph;  //邻接矩阵
public:
    Graph():v(0),e(0){
        this->graph=new T*[1];
        this->pair=new T[1];
    }
    Graph(int v):v(v),e(0){
        this->graph=new T*[v];
        for(int i=0;i<v;i++){
            graph[i]=new T[v]{};
        }
        this->pair=new T[v];
    }
    int GetIdx(T t){
        for(int i=0;i<this->v;i++){
            if(pair[i]==t)
                return i;
        }
        return -1;
    }
    void Print(T** graph,int v){
        cout<<"pair"<<endl;
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
        }
        cout<<"\n\ngraph"<<endl;
        for(int i=0;i<v;i++){
            for(int j=0;j<this->v;j++){
                cout<<graph[i][j]<<"\t";
            }
            cout<<"\n"<<endl;
        }
        cout<<endl;
    }
    void InsertVertex(T v){
        T* tempPair=new T[++this->v];
        T** tempGraph=new T*[this->v];
        for(int i=0;i<this->v;i++){
            tempGraph[i]=new T[this->v]{};
        }
        int idx=0;
        for(;pair[idx]<v&&idx<this->v-1;idx++){
            tempPair[idx]=this->pair[idx];
        }
        tempPair[idx]=v;
        for(int i=idx+1;i<this->v;i++){
            tempPair[i]=this->pair[i];
        }
        for(int i=0;i<this->v;i++){
            for(int j=0;j<this->v;j++){
                if(i<idx&&j<idx)
                    tempGraph[i][j]=graph[i][j];
                if(i<idx&&j>idx)
                    tempGraph[i][j]=graph[i][j-1];
                if(i>idx&&j<idx)
                    tempGraph[i][j]=graph[i-1][j];
                if(i>idx&&j>idx)
                    tempGraph[i][j]=graph[i-1][j-1];
            }
        }
        if(this->pair)
            delete[]this->pair;
        this->pair=tempPair;
        if(this->graph)
            delete[]this->graph;
        this->graph=tempGraph;
    }
    void InsertEdge(T u,T v,int l){
        graph[GetIdx(u)][GetIdx(v)]=l;
        graph[GetIdx(v)][GetIdx(u)]=l;
        this->e++;
    }
    void DeleteVertes(T v){
        int idx=GetIdx(v);
        for(int i=idx;i<this->v-1;i++){
            pair[i]=pair[i+1];
            for(int j=idx;j<this->v-1;j++){
                graph[i][j]=graph[i+1][j+1];
            }
        }
        this->v--;
    }
    void DeleteEdge(int u,int v){
        graph[GetIdx(u)][GetIdx(v)]=0;
        graph[GetIdx(v)][GetIdx(u)]=0;
        this->e--;
    }
    //判断path中是否包含环
    bool Cyclic(int** path){
        bool* visited=new bool[this->v]{};
        for(int i=0;i<this->v;i++){
            if(!visited[i])
                if(CyclicDFS(i,-1,visited,path))
                    return true;
        }
        return false;
    }
    //采用DFS辅助判断path中是否包含环
    bool CyclicDFS(int v,int parent,bool* visited,int** path){
        visited[v]=true;
        for(int i=0;i<this->v;i++){
            if(path[i][v]>0){
                if(!visited[i]){
                    if(CyclicDFS(i,v,visited,path))
                        return true;
                }
                    
                else if(i!=parent)
                    return true;
            }
        }
        return false;
    }
    //找到未被访问的最短路径
    void GetShortest(bool** visited,int& v,int& u){
        for(int i=1;i<this->v;i++){
            for(int j=0;j<i;j++){
                if(i==1&&j==0){
                    while(graph[i][j]==0){
                        j++;
                        if(j==i){
                            i++,j=0;
                        }
                    }
                    v=i,u=j;
                    continue;
                }
                if(graph[i][j]>0&&!visited[i][j]&&graph[i][j]<graph[v][u])
                    v=i,u=j;
            }
        }
    }
    //根据结点找到该结点相邻的未被访问的最短路径
    int GetShortest(int v,bool** visited){
        int temp=0;
        for(int i=0;i<this->v;i++){
            if(i==0){
                while(graph[i][v]==0||visited[i][v]){
                    i++;
                }
                temp=i;
            }
            if(i==v)
                i++;
            if(i>=this->v)
                return -1;
            if(graph[i][v]>0&&!visited[i][v]&&graph[i][v]<graph[temp][v])
                temp=i;
        }
        return temp;
    }
    //Kruskal算法形成最小生成树
    int** Kruskal(){
        int** path=new int*[this->v];
        bool** visited=new bool*[this->v];
        for(int i=0;i<this->v;i++){
            path[i]=new int[this->v]{};
            visited[i]=new bool[this->v]{};
        }
        int a,b,tagA=-1,tagB=-1;
        while(1){
            GetShortest(visited,a,b);
            if(a==tagA&&b==tagB)
                break;
            else
                tagA=a,tagB=b;
            visited[a][b]=1,visited[b][a]=1;
            path[a][b]=graph[a][b],path[b][a]=graph[b][a];
            if(Cyclic(path)){
                path[a][b]=0,path[b][a]=0;
            }
        }
        return path;
    }
    //Prim算法生成最小生成树
    int** Prim(){
        int** path=new int*[this->v];
        bool** visited=new bool*[this->v];
        for(int i=0;i<this->v;i++){
            path[i]=new int[this->v]{};
            visited[i]=new bool[this->v]{};
        }
        int a,b=0;
        while(1){
            a=GetShortest(b,visited);
            if(a==-1)
                break;
            visited[a][b]=1,visited[b][a]=1;
            path[a][b]=graph[a][b],path[b][a]=graph[b][a];
            if(Cyclic(path)){
                path[a][b]=0,path[b][a]=0;
            }
            b=a;
        }
        return path;
    }
};

int main(){
    Graph<int> g;
    for(int i=0;i<7;i++){
        g.InsertVertex(i);
    }
    g.InsertEdge(0,1,28);
    g.InsertEdge(0,5,10);
    g.InsertEdge(1,2,16);
    g.InsertEdge(1,6,14);
    g.InsertEdge(2,3,12);
    g.InsertEdge(3,4,22);
    g.InsertEdge(3,6,18);
    g.InsertEdge(4,6,24);
    g.InsertEdge(4,5,25);
    g.Print(g.graph,g.v);
    int** krusla=g.Kruskal();
    int** prim=g.Prim();
    cout<<"\nkrusla："<<endl;
    g.Print(krusla,g.v);
    cout<<"\nPrim："<<endl;
    g.Print(prim,g.v);
    return 0;
}
