template<class T>
class Graph{    //有向图    
public:
    int v;      //顶点数
    int e;      //边数
    T* pair;    //键对
    int** graph;  //邻接矩阵
public:
    Graph():v(0),e(0){
        this->graph=new int*[1];
        this->pair=new T[1];
    }
    Graph(int v):v(v),e(0){
        this->graph=new int*[v];
        for(int i=0;i<v;i++){
            graph[i]=new int[v]{};
        }
        this->pair=new T[v];
    }
    bool IsEmpty(){
        if(v==0&&e==0)
            return true;
        return false;
    }
    int NumberOfVertices(){ //返回总顶点数
        return this->v;
    }
    int NumberOfEdges(){    //返回总边数
        return this->e;
    }
    int Degree(T v){      //返回以顶点u为起点边数
        int count=0;
        for(int i=0;i<this->v;i++){
            if(graph[GetIdx(v)][i])
                count++;
        }
        return count;
    }
    bool ExistEdge(T v,T u){
        if(graph[GetIdx(v)][GetIdx(u)])
            return true;
        return false;
    }
    int GetIdx(T t){
        for(int i=0;i<this->v;i++){
            if(pair[i]==t)
                return i;
        }
        return -1;
    }
    void Print(int** graph,int v){
        cout<<"pair"<<endl;
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
        }
        cout<<"\n\ngraph"<<endl;
        cout<<"\t";
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
        }
        cout<<"\n\n";
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
            for(int j=0;j<this->v;j++){
                cout<<graph[i][j]<<"\t";
            }
            cout<<"\n"<<endl;
        }
        cout<<endl;
    }
    void InsertVertex(T v){
        T* tempPair=new T[++this->v];
        int** tempGraph=new int*[this->v];
        for(int i=0;i<this->v;i++){
            tempGraph[i]=new int[this->v]{};
        }
        int idx=0;
        for(;pair[idx]<v&&idx<this->v-1;idx++){
            tempPair[idx]=this->pair[idx];
        }
        tempPair[idx]=v;
        for(int i=idx+1;i<this->v;i++){
            tempPair[i]=this->pair[i];
        }
        for(int i=0;i<this->v;i++){
            for(int j=0;j<this->v;j++){
                if(i<idx&&j<idx)
                    tempGraph[i][j]=graph[i][j];
                if(i<idx&&j>idx)
                    tempGraph[i][j]=graph[i][j-1];
                if(i>idx&&j<idx)
                    tempGraph[i][j]=graph[i-1][j];
                if(i>idx&&j>idx)
                    tempGraph[i][j]=graph[i-1][j-1];
            }
        }
        if(this->pair)
            delete[]this->pair;
        this->pair=tempPair;
        if(this->graph)
            delete[]this->graph;
        this->graph=tempGraph;
    }
    void InsertEdge(T v,T u,int l){
        graph[GetIdx(v)][GetIdx(u)]=l;
        this->e++;
    }
    void DeleteVertes(T v){
        for(int i=GetIdx(v);i<this->v-1;i++){
            pair[i]=pair[i+1];
            for(int j=GetIdx(v);j<this->v-1;j++){
                graph[i][j]=graph[i+1][j+1];
            }
        }
        this->v--;
    }
    void DeleteEdge(T v,T u){
        graph[GetIdx(v)][GetIdx(u)]=0;
        this->e--;
    }
    void DFS(T v,T u){
        bool* visited=new bool[this->v]{};
        stack<T> s;
        s.push(v);
        while(!s.empty()){
            cout<<s.top();
            if(s.top()==u)
                break;
            int idx=GetIdx(s.top());
            s.pop();
            visited[idx]=1;
            for(int i=0;i<this->v;i++){
                if(this->graph[idx][i]&&!visited[i])
                    s.push(pair[i]);
            }
        }
    }
    void BFS(T v,T u){
        bool* visited=new bool[this->v]{};
        queue<T> q;
        q.push(v);
        while(!q.empty()){
            cout<<q.front();
            if(q.front()==u)
                break;
            int idx=GetIdx(q.front());
            q.pop();
            visited[idx]=1;
            for(int i=0;i<this->v;i++){
                if(this->graph[idx][i]&&!visited[i])
                    q.push(pair[i]);
            }
        }
    }
};
