#include<iostream>
#include<stack>
using namespace std;

template<class T>
class Graph{    //有向图     
public:
    int v;      //顶点数
    int e;      //边数
    T* pair;    //键对
    T** graph;  //邻接矩阵
public:
    Graph():v(0),e(0){
        this->graph=new T*[1];
        this->pair=new T[1];
    }
    Graph(int v):v(v),e(0){
        this->graph=new T*[v];
        for(int i=0;i<v;i++){
            graph[i]=new T[v]{};
        }
        this->pair=new T[v];
    }
    int GetIdx(T t){
        for(int i=0;i<this->v;i++){
            if(pair[i]==t)
                return i;
        }
        return -1;
    }
    void Print(T** graph,int v){
        cout<<"pair"<<endl;
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i]<<"\t";
        }
        cout<<"\n\ngraph"<<endl;
        for(int i=0;i<v;i++){
            for(int j=0;j<this->v;j++){
                cout<<graph[i][j]<<"\t";
            }
            cout<<"\n"<<endl;
        }
        cout<<endl;
    }
    void InsertVertex(int v){
        T* tempPair=new T[++this->v];
        T** tempGraph=new T*[this->v];
        for(int i=0;i<this->v;i++){
            tempGraph[i]=new T[this->v]{};
        }
        int idx=0;
        for(;pair[idx]<v&&idx<this->v-1;idx++){
            tempPair[idx]=this->pair[idx];
        }
        tempPair[idx]=v;
        for(int i=idx+1;i<this->v;i++){
            tempPair[i]=this->pair[i];
        }
        for(int i=0;i<this->v;i++){
            for(int j=0;j<this->v;j++){
                if(i<idx&&j<idx)
                    tempGraph[i][j]=graph[i][j];
                if(i<idx&&j>idx)
                    tempGraph[i][j]=graph[i][j-1];
                if(i>idx&&j<idx)
                    tempGraph[i][j]=graph[i-1][j];
                if(i>idx&&j>idx)
                    tempGraph[i][j]=graph[i-1][j-1];
            }
        }
        if(this->pair)
            delete[]this->pair;
        this->pair=tempPair;
        if(this->graph)
            delete[]this->graph;
        this->graph=tempGraph;
    }
    void InsertEdge(int u,int v,int l){
        graph[GetIdx(u)][GetIdx(v)]=l;
        this->e++;
    }
    void DeleteVertes(int v){
        int idx=GetIdx(v);
        for(int i=idx;i<this->v-1;i++){
            pair[i]=pair[i+1];
            for(int j=idx;j<this->v-1;j++){
                graph[i][j]=graph[i+1][j+1];
            }
        }
        this->v--;
    }
    void DeleteEdge(int v,int u){
        graph[GetIdx(v)][GetIdx(u)]=0;
        this->e--;
    }
    //最短路径，多源 (v->u)
    int Floyd(int v,int u){
        int** dist=new int*[this->v];
        for(int i=0;i<this->v;i++){
            dist[i]=new int [this->v];
            for(int j=0;j<this->v;j++){
                    dist[i][j]=graph[i][j];
            }
        }
        for(int i=0;i<this->v;i++){
            for(int j=0;j<this->v;j++){
                for(int k=0;k<this->v;k++){
                    if(dist[i][j]&&dist[j][k]&&dist[i][k]&&(dist[i][j]+dist[j][k]<dist[i][k]))
                        dist[i][k]=dist[i][j]+dist[j][k];
                }
            }
        }
        return dist[v][u];
    }
};

int main(){
    Graph<int> g;
    for(int i=0;i<=2;i++){
        g.InsertVertex(i);
    }
    g.InsertEdge(0,1,4);
    g.InsertEdge(0,2,11);
    g.InsertEdge(1,2,2);
    g.InsertEdge(1,0,6);
    g.InsertEdge(2,0,3);
    g.Print(g.graph,g.v);
    cout<<"最短路径："<<g.Floyd(0,2);
    return 0;
}
