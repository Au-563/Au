#include<iostream>
#include<time.h>
using namespace std;

template<class T>
class Node{
public:
    union {
        int count;  //头顶点用于记录指向该顶点的顶点数
        T data;     //其余顶点用于记录顶点信息
    };
    int len;
    Node* link;
public:
    Node():len(0),link(NULL){}
    Node(T data,int l):data(data),len(l),link(NULL){}
};

template<class T>
class Graph{            //有向图     
public:
    int v;              //顶点数
    int e;              //边数
    T* pair;            //键对
    Node<T>** graph;    //顶点
public:
    Graph():v(0),e(0){
        this->pair=new T[1];
        this->graph=new Node<T>*[1];
        this->graph[0]=new Node<T>;
    }
    Graph(int v):v(v),e(0){
        this->pair=new T[this->v];
        this->graph=new Node<T>*[this->v];
        for(int i=0;i<this->v;i++){
            this->graph[i]=new Node<T>;
        }
    }
    int GetIdx(T t){
        for(int i=0;i<this->v;i++){
            if(pair[i]==t)
                return i;
        }
        return -1;
    }
    void Print(){
        cout<<"pair"<<endl;
        for(int i=0;i<this->v;i++){
            cout<<this->pair[i];
        }
        cout<<"\n\ngraph"<<endl;
        for(int i=0;i<this->v;i++){
            cout<<"count:"<<this->graph[i]->count<<"\t";
            cout<<this->pair[i];
            if(this->graph[i]->link!=NULL)
                cout<<"\t("<<this->graph[i]->link->len<<")-> ";
            Node<T>*temp=this->graph[i]->link;
            while(temp!=NULL){
                cout<<temp->data<<"\t";
                if(temp->link!=NULL)
                    cout<<"\t("<<temp->link->len<<")-> ";
                temp=temp->link;
            }
            cout<<"\n"<<endl;
        }
        cout<<endl;
    }
    void InsertVertex(T v){
        T* tempPair=new T[++this->v];
        Node<T>** tempGraph=new Node<T>*[this->v];
        for(int i=0;i<this->v;i++){
            tempGraph[i]=new Node<T>;
        }
        int idx=0;
        for(;idx<this->v-1&&pair[idx]<v;idx++){
            tempPair[idx]=this->pair[idx];
            tempGraph[idx]->count=this->graph[idx]->count;
            tempGraph[idx]->len=this->graph[idx]->len;
            tempGraph[idx]->link=this->graph[idx]->link;
            this->graph[idx]->link=NULL;
        }
        tempPair[idx]=v;
        tempGraph[idx]->count=0;
        tempGraph[idx]->len=0;
        tempGraph[idx++]->link=NULL;
        while(idx<this->v){
            tempPair[idx]=this->pair[idx-1];
            tempGraph[idx]->count=this->graph[idx-1]->count;
            tempGraph[idx]->len=this->graph[idx-1]->len;
            tempGraph[idx]->link=this->graph[idx-1]->link;
            this->graph[idx++]->link=NULL;
        }
        if(this->pair)
            delete[]this->pair;
        this->pair=tempPair;
        if(this->graph)
            delete[]this->graph;
        this->graph=tempGraph;
    }
    void InsertEdge(T v,T u,int l){
        Node<T>* temp=this->graph[GetIdx(v)];
        while(temp->link!=NULL){
            temp=temp->link;
        }
        Node<T>* tempNode=new Node<T>(u,l);
        temp->link=tempNode;
        this->graph[GetIdx(u)]->count++;
        this->e++;
    }
    void DeleteVertes(T v){
        Node<T>* temp=this->graph[GetIdx(v)];
        for(int i=GetIdx(v);i<this->v-1;i++){
            pair[i]=pair[i+1];
            graph[i]=graph[i+1];
        }
        delete[] temp;
        this->v--;
        for(int i=0;i<this->v;i++){
            temp=this->graph[i];
            while(temp!=NULL&&temp->link!=NULL){
                if(temp->link->data==v){
                    Node<T>* tempNode=temp->link;
                    if(temp->link->link)
                        temp->link=temp->link->link;
                    else    
                        temp->link=NULL;
                    delete[] tempNode;
                    this->graph[i]->count--;
                }
                temp=temp->link;
            }
        }
    }
    void DeleteEdge(T v,T u){
        Node<T>* temp=graph[GetIdx(v)];
        while(temp->link->data!=u&&temp!=NULL){
            temp=temp->link;
        }
        if(temp){
            Node<T>* tempNode=temp->link;
            if(temp->link->link)
                temp->link=temp->link->link;
            else    
                temp->link=NULL;
            if(tempNode){
                delete[] tempNode;
                tempNode=NULL;
            }
        }
        this->graph[GetIdx(u)]->count--;
        this->e--;
    }
    int* EarliestOccurrenceTime(){
        int* time=new int[this->v]{};
        int* count=new int[this->v];
        for(int i=0;i<this->v;i++){
            count[i]=this->graph[i]->count;
        }
        int top=-1;
        for(int i=0;i<this->v;i++){
            if(count[i]==0){
                count[i]=top;
                top=i;
            }
        }
        for(int i=0;i<this->v;i++){
            if(top==-1)
                throw"Network has a cycle";
            int past=time[GetIdx(this->pair[top])];
            Node<T>* temp=this->graph[top]->link;
            top=count[top];
            while(temp!=NULL){
                if(time[GetIdx(temp->data)]==0)
                    time[GetIdx(temp->data)]=past+temp->len;
                else if(time[GetIdx(temp->data)]>0)
                    time[GetIdx(temp->data)]=past+temp->len>time[GetIdx(temp->data)]?past+temp->len:time[GetIdx(temp->data)];
                count[GetIdx(temp->data)]--;
                if(count[GetIdx(temp->data)]==0){
                    count[GetIdx(temp->data)]=top;
                    top=GetIdx(temp->data);
                }
                temp=temp->link;
            }
        }
        return time;
    }
    int* LatestOccurrenceTime(){
        int* earliestOccurrenceTime=this->EarliestOccurrenceTime();
        int* time=new int[this->v]{};
        time[this->v-1]=earliestOccurrenceTime[this->v-1];
        int top=this->v-1;
        while(top>=0){
            for(int i=this->v-1;i>=0;i--){
                if(i==top)
                    continue;
                Node<T>* temp=this->graph[i]->link;
                while(temp!=NULL){
                    if(temp->data==this->pair[top])
                        break;
                    temp=temp->link;
                }
                if(temp){
                    if(time[i]==0)
                        time[i]=time[top]-temp->len;
                    else
                        time[i]=time[top]-temp->len<time[i]?time[top]-temp->len:time[i];
                }
            }
            top--;
        }
        return time;
    }
};

int main(){
    Graph<char> g;
    for(int i=0;i<=8;i++){
        g.InsertVertex('a'+i);
    }
    g.InsertEdge('a','b',6);
    g.InsertEdge('a','c',4);
    g.InsertEdge('a','d',5);
    g.InsertEdge('b','e',1);
    g.InsertEdge('c','e',1);
    g.InsertEdge('d','f',2);
    g.InsertEdge('e','g',9);
    g.InsertEdge('e','h',7);
    g.InsertEdge('f','h',4);
    g.InsertEdge('g','i',2);
    g.InsertEdge('h','i',4);
    g.Print();
    cout<<"vertex：\t\t\t";
    for(int i=0;i<g.v;i++){
        cout<<g.pair[i]<<"\t";
    }
    cout<<"\n\n";
    int* Etime=g.EarliestOccurrenceTime();
    cout<<"EarliestOccurrenceTime：\t";
    for(int i=0;i<g.v;i++){
        cout<<Etime[i]<<"\t";
    }
    cout<<"\n\n";
    int* Ltime=g.LatestOccurrenceTime();
    cout<<"latestOccurrenceTime：\t\t";
        for(int i=0;i<g.v;i++){
        cout<<Ltime[i]<<"\t";
    }
    return 0;
}
